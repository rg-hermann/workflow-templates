name: Reusable Python CI

# NOTE: Move realizado em 2025-09 para padronizar estrutura.
# Caminho antigo: .github/workflows/ci-python.yaml

on:
  workflow_call:
    inputs:
      python-version:
        type: string
        required: false
        default: '3.11'
      install-command:
        type: string
        required: false
        default: 'pip install -r requirements.txt'
      test-command:
        type: string
        required: false
        default: 'pytest -q'
      lint-command:
        type: string
        required: false
        default: 'flake8 .'
      run-pip-audit:
        type: boolean
        required: false
        default: false
      pip-audit-level:
        type: string
        required: false
        default: 'high'
        description: 'Vulnerability level to report (low|medium|high|critical) interpreted by pip-audit exit code strategy'
      fail-on-audit:
        type: boolean
        required: false
        default: false
        description: 'Fail CI if pip-audit finds issues at or above chosen level'
      enable-coverage:
        type: boolean
        required: false
        default: false
        description: 'If true, attempts to run coverage via pytest --cov'
      coverage-args:
        type: string
        required: false
        default: '--cov=. --cov-report=xml'
        description: 'Extra args appended when coverage enabled'
      working-directory:
        type: string
        required: false
        default: '.'
      timeout-minutes:
        type: number
        required: false
        default: 15
        description: 'Timeout for CI job'
    secrets: {}

permissions:
  contents: read

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          cache-dependency-path: ${{ inputs.working-directory }}/requirements*.txt

      - name: Upgrade pip & base tooling
        run: |
          python -m pip install --upgrade pip
          pip install --disable-pip-version-check --quiet wheel

      - name: Install dependencies
        if: ${{ inputs.install-command != '' }}
        run: bash -c "${{ inputs.install-command }}"

      - name: Lint
        if: ${{ inputs.lint-command != '' }}
        shell: bash
        run: |
          set -euo pipefail
          CMD='${{ inputs.lint-command }}'
          if echo "$CMD" | grep -q 'flake8'; then
            pip install --quiet flake8 || true
          elif echo "$CMD" | grep -q 'ruff'; then
            pip install --quiet ruff || true
          fi
          echo "Running lint: $CMD"
          bash -c "$CMD"

      - name: Run tests / coverage
        if: ${{ inputs.test-command != '' }}
        shell: bash
        run: |
          set -euo pipefail
          TCMD='${{ inputs.test-command }}'
          if [ "${{ inputs.enable-coverage }}" = "true" ]; then
            pip install --quiet pytest pytest-cov || true
            echo "Running with coverage"
            if [ "$TCMD" = 'pytest -q' ]; then
              COV_ARGS_RAW='${{ inputs.coverage-args }}'
              # Split coverage args preserving quoted segments (basic split on spaces)
              IFS=' ' read -r -a COV_ARR <<< "$COV_ARGS_RAW"
              pytest -q "${COV_ARR[@]}" || EXIT=$?
            else
              COV_ARGS_RAW='${{ inputs.coverage-args }}'
              IFS=' ' read -r -a COV_ARR <<< "$COV_ARGS_RAW"
              bash -c "$TCMD ${COV_ARR[*]}" || EXIT=$?
            fi
          else
            bash -c "$TCMD" || EXIT=$?
          fi
          : "${EXIT:=0}"; exit "$EXIT"
      - name: Upload coverage artifact
        if: ${{ inputs.enable-coverage }}
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage
          path: coverage.xml
          if-no-files-found: ignore

      - name: pip-audit
        if: ${{ inputs.run-pip-audit }}
        shell: bash
        run: |
          set -euo pipefail
          pip install --quiet pip-audit
          LEVEL='${{ inputs.pip-audit-level }}'
          FAIL='${{ inputs.fail-on-audit }}'
          echo "Running pip-audit (level=$LEVEL fail=$FAIL)"
          pip-audit -f json > audit.json || true
          COUNT=$(jq 'length' audit.json 2>/dev/null || echo 0)
          echo "Total advisories: $COUNT" | tee -a "$GITHUB_STEP_SUMMARY"
          if [ "$COUNT" -gt 0 ]; then
            echo "Advisories present." >&2
            if [ "$FAIL" = "true" ]; then
              echo "Failing due to fail-on-audit=true" >&2
              exit 1
            fi
          fi
          echo '{"version":"2.1.0","runs":[]}' > pip-audit.sarif
      - name: Upload audit artifacts
        if: ${{ inputs.run-pip-audit }}
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: |
            audit.json
            pip-audit.sarif
          if-no-files-found: ignore
      - name: Summary
        if: always()
        run: echo "Python CI finalizada" >> "$GITHUB_STEP_SUMMARY"
