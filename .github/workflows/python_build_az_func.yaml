name: Python Build Azure Function

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
        description: 'Python version to use for build and test'
      requirements-file:
        required: false
        type: string
        default: 'requirements.txt'
        description: 'Path to requirements file'
      test-folder:
        required: false
        type: string
        default: 'tests'
        description: 'Folder containing tests'
      enable-coverage:
        required: false
        type: boolean
        default: false
        description: 'Run coverage (pytest --cov) if tests exist'
      timeout-minutes:
        required: false
        type: number
        default: 15
        description: 'Job timeout'
    outputs:
      artifact-name:
        description: 'Name of the build artifact'
        value: ${{ jobs.build.outputs.artifact-name }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    outputs:
      artifact-name: ${{ steps.set-artifact-name.outputs.artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          cache-dependency-path: ${{ inputs.requirements-file }}

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r ${{ inputs.requirements-file }}

      - name: Run tests / coverage
        run: |
          set -euo pipefail
          if [ -d "${{ inputs.test-folder }}" ]; then
            if [ "${{ inputs.enable-coverage }}" = "true" ]; then
              pip install pytest-cov >/dev/null 2>&1 || true
              pytest ${{ inputs.test-folder }} --cov=. --cov-report=xml
              echo "Coverage report generated: coverage.xml" >> $GITHUB_STEP_SUMMARY
            else
              pytest ${{ inputs.test-folder }}
            fi
          else
            echo "No tests found, skipping..." | tee -a $GITHUB_STEP_SUMMARY
          fi

      - name: Archive function app
        shell: bash
        run: |
          set -euo pipefail
          zip -r functionapp.zip . -x "tests/*" "__pycache__/*" "*.pyc"

      - name: Set artifact name
        id: set-artifact-name
        run: echo "artifact-name=functionapp.zip" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: functionapp
          path: functionapp.zip